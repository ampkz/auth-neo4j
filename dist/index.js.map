{"version":3,"sources":["../src/index.ts","../src/routing/auth.ts","../src/middleware/statusCodes.ts","../src/errors/errors.ts","../src/db/connection.ts","../src/users/user.ts","../src/sessions/session.ts","../src/sessions/crud-session.ts","../src/routing/routes/auth.ts","../src/routing/user.ts","../src/auth/auth.ts","../src/middleware/permitRoles.ts","../src/users/crud-user.ts","../src/routing/routes/user.ts"],"sourcesContent":["import authRouter from './routing/auth';\nimport userRouter from './routing/user';\nimport cookieParser from 'cookie-parser';\nimport express, { Express } from 'express';\n\nexport type AuthNeo4jConfig = {\n\tsaltRounds: string;\n\ttokenSecret: string;\n\ttokenExpiration: string;\n\tcookieExpiration: string;\n\tauthRealm: string;\n\tloginURI: string;\n\tlogoutURI: string;\n\tuserURI: string;\n\tneo4jHost: string;\n\tnoe4jPort: string;\n\tneo4jUser: string;\n\tneo4jPwd: string;\n\tusersDB: string;\n};\n\nfunction authNeo4j(config?: AuthNeo4jConfig) {\n\t/* istanbul ignore next line */\n\tif (config) {\n\t\tprocess.env.AUTH_NEO4J_SALT_ROUNDS = config.saltRounds;\n\t\tprocess.env.AUTH_NEO4J_TOKEN_SECRET = config.tokenSecret;\n\t\tprocess.env.AUTH_NEO4J_TOKEN_EXPIRATION = config.tokenExpiration;\n\t\tprocess.env.AUTH_NEO4J_COOKIE_EXPIRATION = config.cookieExpiration;\n\t\tprocess.env.AUTH_NEO4J_AUTH_REALM = config.authRealm;\n\t\tprocess.env.AUTH_NEO4J_LOGIN_URI = config.loginURI;\n\t\tprocess.env.AUTH_NEO4J_LOGOUT_URI = config.logoutURI;\n\t\tprocess.env.AUTH_NEO4J_USER_URI = config.userURI;\n\t\tprocess.env.AUTH_NEO4J_NEO4J_HOST = config.neo4jHost;\n\t\tprocess.env.AUTH_NEO4J_NEO4J_PORT = config.noe4jPort;\n\t\tprocess.env.AUTH_NEO4J_NEO4J_USER = config.neo4jUser;\n\t\tprocess.env.AUTH_NEO4J_NEO4J_PWD = config.neo4jPwd;\n\t\tprocess.env.AUTH_NEO4J_USERS_DB = config.usersDB;\n\t} else if (!config && process.env.NODE_ENV !== 'test') {\n\t\tprocess.exit(9);\n\t}\n\n\tconst app: Express = express();\n\n\tapp.use(cookieParser());\n\tapp.use(express.json());\n\tapp.use(express.urlencoded({ extended: true }));\n\n\tapp.use(authRouter(process.env.AUTH_NEO4J_LOGIN_URI as string, process.env.AUTH_NEO4J_LOGOUT_URI as string));\n\tapp.use(userRouter(process.env.AUTH_NEO4J_USER_URI as string));\n\n\treturn app;\n}\n\nexport default authNeo4j;\n","import { Router } from 'express';\nimport { sendStatus405 } from '../middleware/statusCodes';\nimport { login, logout } from './routes/auth';\n\nexport default function authRouter(loginURI: string, logoutURI: string): Router {\n\tconst router: Router = Router();\n\n\trouter.get(loginURI, sendStatus405('POST'));\n\trouter.put(loginURI, sendStatus405('POST'));\n\trouter.delete(loginURI, sendStatus405('POST'));\n\trouter.post(loginURI, login);\n\n\trouter.get(logoutURI, logout);\n\trouter.put(logoutURI, sendStatus405('GET'));\n\trouter.delete(logoutURI, sendStatus405('GET'));\n\trouter.post(logoutURI, sendStatus405('GET'));\n\n\treturn router;\n}\n","import { Request, Response } from 'express';\n\nexport function sendStatus401(res: Response) {\n\treturn res.set('WWW-Authenticate', `xBasic realm=\"${process.env.AUTH_NEO4J_AUTH_REALM}\"`).status(401).end();\n}\n\nexport function sendStatus405(...allow: string[]) {\n\treturn (req: Request, res: Response) => {\n\t\tres.set('Allow', allow).status(405).end();\n\t};\n}\n","export class CustomError extends Error {\n\tprivate _code: number;\n\n\tconstructor(message: string, code: number, options?: ErrorOptions) {\n\t\tsuper(message, options);\n\n\t\tthis._code = code;\n\t}\n\n\tgetCode(): number {\n\t\treturn this._code;\n\t}\n}\n\nexport class InternalError extends CustomError {\n\tconstructor(message: string, options?: ErrorOptions) {\n\t\tsuper(message, 500, options);\n\t}\n}\n\nexport enum RoutingErrors {\n\tINVALID_REQUEST = 'Invalid Request',\n}\n\nexport type FieldErrorJSON = { field: string; message: string };\n\nexport class FieldError {\n\tstatic REQUIRED: string = 'Required';\n\tstatic INVALID_AUTH = 'Invalid Auth Type.';\n\n\tprivate _field: string;\n\tprivate _message: string;\n\n\tconstructor(field: string, message: string) {\n\t\tthis._field = field;\n\t\tthis._message = message;\n\t}\n\n\tgetField(): string {\n\t\treturn this._field;\n\t}\n\n\tgetMessage(): string {\n\t\treturn this._message;\n\t}\n\n\ttoJSON(): FieldErrorJSON {\n\t\treturn { field: this.getField(), message: this.getMessage() };\n\t}\n}\n\nexport class FieldErrors extends CustomError {\n\tprivate _fieldErrors: Array<FieldError> = [];\n\n\tconstructor(message: string, options?: ErrorOptions) {\n\t\tsuper(message, 400, options);\n\t}\n\n\taddFieldError(fieldError: FieldError) {\n\t\tthis._fieldErrors.push(fieldError);\n\t}\n\n\thasFieldErrors(): boolean {\n\t\treturn this._fieldErrors.length > 0;\n\t}\n\n\tgetFields(): Array<FieldErrorJSON> {\n\t\tconst fields: Array<FieldErrorJSON> = [];\n\t\tfor (const fieldError of this._fieldErrors) {\n\t\t\tfields.push(fieldError.toJSON());\n\t\t}\n\t\treturn fields;\n\t}\n}\n","import neo4j, { Driver } from 'neo4j-driver';\nimport { InternalError } from '../errors/errors';\n\nexport enum Errors {\n\tDB_CONNECTION_UNAUTHORIZED = 'Unauthorized Connection to Driver',\n}\n\nexport async function connect(\n\tusername: string = process.env.AUTH_NEO4J_NEO4J_USER as string,\n\tpassword: string = process.env.AUTH_NEO4J_NEO4J_PWD as string\n): Promise<Driver> {\n\tconst driver: Driver = neo4j.driver(\n\t\t`bolt://${process.env.AUTH_NEO4J_NEO4J_HOST}:${process.env.AUTH_NEO4J_NEO4J_PORT}`,\n\t\tneo4j.auth.basic(username, password)\n\t);\n\n\ttry {\n\t\t// Will throw an error if not authenticated\n\t\tawait driver.getServerInfo();\n\t} catch (error) {\n\t\tthrow new InternalError(Errors.DB_CONNECTION_UNAUTHORIZED, { cause: error });\n\t}\n\n\treturn driver;\n}\n","import { Driver, RecordShape, Session } from 'neo4j-driver';\nimport { Auth } from '../auth/auth';\nimport { connect } from '../db/connection';\nimport * as bcrypt from 'bcrypt';\n\nexport interface IUser {\n\tid?: string;\n\temail: string;\n\tauth: Auth;\n\tfirstName?: string;\n\tlastName?: string;\n\tsecondName?: string;\n}\n\nexport type UserUpdates = {\n\tupdatedEmail?: string;\n\tupdatedFirstName?: string;\n\tupdatedSecondName?: string;\n\tupdatedLastName?: string;\n\tupdatedAuth?: string;\n\tupdatedPassword?: string;\n};\n\nexport class User implements IUser {\n\tpublic id?: string;\n\tpublic email: string;\n\tpublic auth: Auth;\n\tpublic firstName?: string;\n\tpublic lastName?: string;\n\tpublic secondName?: string;\n\n\tconstructor(user: IUser) {\n\t\tthis.id = user.id;\n\t\tthis.email = user.email;\n\t\tthis.auth = user.auth;\n\t\tthis.firstName = user.firstName;\n\t\tthis.lastName = user.lastName;\n\t\tthis.secondName = user.secondName;\n\t}\n}\n\nexport async function checkPassword(email: string, password: string): Promise<User | undefined> {\n\tconst driver: Driver = await connect();\n\tconst session: Session = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\tlet user: User | undefined = undefined;\n\n\tconst match: RecordShape = await session.run(`MATCH (u:User {email: $email}) RETURN u`, { email });\n\n\tif (match.records.length === 1) {\n\t\tconst matchedUser = match.records[0].get(0).properties;\n\t\tconst pwdMatch = await bcrypt.compare(password, matchedUser.pwd);\n\n\t\tif (pwdMatch) {\n\t\t\tuser = new User(matchedUser);\n\t\t}\n\t}\n\n\tawait driver.close();\n\tawait session.close();\n\n\treturn user;\n}\n","import crypto from 'node:crypto';\nimport { User } from '../users/user';\n\nexport function generateSessionToken(bytes: number = 32): string {\n\treturn crypto.randomBytes(bytes).toString('hex');\n}\n\nexport function hashToken(token: string): string {\n\treturn crypto.createHash('sha256').update(token).digest('hex');\n}\n\nexport interface Session {\n\tid: string;\n\tuserID: string;\n\texpiresAt: Date;\n}\n\nexport type SessionValidationResult = { session: Session; user: User } | { session: null; user: null };\n","import { Driver, RecordShape } from 'neo4j-driver-core';\nimport { hashToken, Session, SessionValidationResult } from './session';\nimport { Session as NeoSession } from 'neo4j-driver';\nimport { connect } from '../db/connection';\nimport { InternalError } from '../errors/errors';\nimport { User } from '../users/user';\n\nexport enum Errors {\n\tCOULD_NOT_CREATE_SESSION = 'There was an error creating a session',\n\tCOULD_NOT_VALIDATE_SESSION = 'There was an error validating a session',\n\tCOULD_NOT_INVALIDATE_SESSION = 'There was an error invalidating a session',\n\tCOULD_NOT_INVALIDATE_ALL_SESSIONS = 'There was an error invalidating all sessions',\n}\n\nexport async function createSession(token: string, email: string): Promise<Session | undefined> {\n\tconst sessionId: string = hashToken(token);\n\tconst expiresAt: Date = new Date();\n\texpiresAt.setDate(expiresAt.getDate() + parseInt(process.env.AUTH_NEO4J_TOKEN_EXPIRATION as string));\n\n\tconst driver: Driver = await connect();\n\tconst neoSession: NeoSession = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\tlet match: RecordShape;\n\n\ttry {\n\t\tmatch = await neoSession.run(\n\t\t\t`MATCH (u:User {email: $email}) CREATE (u)-[:HAS_SESSION {sessionId: $sessionId}]->(s:Session {expiresAt: $expiresAt}) RETURN u`,\n\t\t\t{ email, sessionId, expiresAt: expiresAt.toISOString() }\n\t\t);\n\t} catch (error) {\n\t\tawait neoSession.close();\n\t\tawait driver.close();\n\n\t\tthrow new InternalError(Errors.COULD_NOT_CREATE_SESSION, { cause: error });\n\t}\n\n\tawait neoSession.close();\n\tawait driver.close();\n\n\tif (match.records.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tconst user: User = new User(match.records[0].get('u').properties);\n\n\tconst session: Session = {\n\t\tid: sessionId,\n\t\tuserID: user.id as string,\n\t\texpiresAt,\n\t};\n\n\treturn session;\n}\n\nexport async function validateSessionToken(token?: string): Promise<SessionValidationResult> {\n\tif (!token) {\n\t\treturn { session: null, user: null };\n\t}\n\n\tconst sessionId: string = hashToken(token);\n\n\tconst driver: Driver = await connect();\n\tconst neoSession: NeoSession = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\tlet match: RecordShape;\n\n\ttry {\n\t\tmatch = await neoSession.run(`MATCH(u:User)-[r:HAS_SESSION {sessionId: $sessionId}]->(s:Session) RETURN u, r, s`, { sessionId });\n\t} catch (error) {\n\t\tawait neoSession.close();\n\t\tawait driver.close();\n\n\t\tthrow new InternalError(Errors.COULD_NOT_VALIDATE_SESSION, { cause: error });\n\t}\n\n\tawait neoSession.close();\n\tawait driver.close();\n\n\tif (match.records.length === 0) {\n\t\treturn { session: null, user: null };\n\t}\n\n\tconst user: User = new User(match.records[0].get('u').properties);\n\tconst session: Session = match.records[0].get('s').properties;\n\tsession.id = match.records[0].get('r').properties.sessionId;\n\tsession.userID = user.id as string;\n\tsession.expiresAt = new Date(session.expiresAt);\n\n\t//TODO invalidate/update based on time\n\tif (Date.now() >= session.expiresAt.getTime()) {\n\t\tawait invalidateSession(session.id);\n\t\treturn { session: null, user: null };\n\t}\n\n\treturn { session, user };\n}\n\nexport async function invalidateSession(sessionId: string): Promise<void> {\n\tconst driver = await connect();\n\tconst neoSession: NeoSession = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\ttry {\n\t\tawait neoSession.run(`MATCH (u:User)-[r:HAS_SESSION {sessionId: $sessionId}]->(s:Session) DETACH DELETE s`, { sessionId });\n\t} catch (error) {\n\t\tawait neoSession.close();\n\t\tawait driver.close();\n\n\t\tthrow new InternalError(Errors.COULD_NOT_INVALIDATE_SESSION, { cause: error });\n\t}\n\n\tawait neoSession.close();\n\tawait driver.close();\n}\n\nexport async function invalidateAllSessions(email: string): Promise<void> {\n\tconst driver = await connect();\n\tconst neoSession: NeoSession = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\ttry {\n\t\tawait neoSession.run(`MATCH (u:User {email: $email})-[r:HAS_SESSION]->(s:Session) DETACH DELETE s`, { email });\n\t} catch (error) {\n\t\tawait neoSession.close();\n\t\tawait driver.close();\n\n\t\tthrow new InternalError(Errors.COULD_NOT_INVALIDATE_ALL_SESSIONS, { cause: error });\n\t}\n\n\tawait neoSession.close();\n\tawait driver.close();\n}\n","import { Request, Response } from 'express';\nimport { FieldError, FieldErrors, RoutingErrors } from '../../errors/errors';\nimport { checkPassword, User } from '../../users/user';\nimport { sendStatus401 } from '../../middleware/statusCodes';\nimport { generateSessionToken, SessionValidationResult } from '../../sessions/session';\nimport { createSession, invalidateSession, validateSessionToken } from '../../sessions/crud-session';\n\nexport async function login(req: Request, res: Response) {\n\tconst { email, password } = req.body;\n\n\tconst required: FieldErrors = new FieldErrors(RoutingErrors.INVALID_REQUEST);\n\n\tif (!email) required.addFieldError(new FieldError('email', FieldError.REQUIRED));\n\tif (!password) required.addFieldError(new FieldError('password', FieldError.REQUIRED));\n\n\tif (required.hasFieldErrors()) {\n\t\treturn res.status(required.getCode()).json({ message: required.message, data: required.getFields() }).end();\n\t}\n\n\tconst user: User | undefined = await checkPassword(email, password);\n\n\tif (user === undefined) {\n\t\treturn sendStatus401(res);\n\t}\n\n\tconst token: string = generateSessionToken();\n\n\tawait createSession(token, email);\n\n\treturn res\n\t\t.status(204)\n\t\t.cookie(`token`, token, { httpOnly: true, maxAge: parseInt(process.env.AUTH_NEO4J_COOKIE_EXPIRATION as string), sameSite: 'strict' })\n\t\t.end();\n}\n\nexport async function logout(req: Request, res: Response) {\n\tconst token = req.cookies.token;\n\n\tif (!token) {\n\t\treturn res.status(204).end();\n\t}\n\n\tconst svr: SessionValidationResult = await validateSessionToken(token);\n\n\tif (svr.session) {\n\t\tawait invalidateSession(svr.session.id);\n\t}\n\n\treturn res.status(204).clearCookie('token').end();\n}\n","import { Router } from 'express';\nimport { sendStatus405 } from '../middleware/statusCodes';\nimport { permitRoles } from '../middleware/permitRoles';\nimport { Auth } from '../auth/auth';\nimport { getUsers, createUser, deleteUser, updateUser, getUser } from './routes/user';\n\nexport default function userRouter(userURI: string): Router {\n\tconst router: Router = Router();\n\n\trouter.get(userURI, permitRoles(Auth.ADMIN), getUsers);\n\trouter.put(userURI, sendStatus405('GET', 'POST'));\n\trouter.delete(userURI, sendStatus405('GET', 'POST'));\n\trouter.post(userURI, permitRoles(Auth.ADMIN), createUser);\n\n\trouter.get(`${userURI}/:userId`, permitRoles(Auth.ADMIN, Auth.SELF), getUser);\n\trouter.put(`${userURI}/:userId`, permitRoles(Auth.ADMIN, Auth.SELF), updateUser);\n\trouter.delete(`${userURI}/:userId`, permitRoles(Auth.ADMIN, Auth.SELF), deleteUser);\n\trouter.post(`${userURI}/:userId`, sendStatus405('GET', 'PUT', 'DELETE'));\n\n\treturn router;\n}\n","export enum Auth {\n\tADMIN = 'ADMIN',\n\tCONTRIBUTOR = 'CONTRIBUTOR',\n\tSELF = 'SELF',\n}\n\nexport function isValidAuth(auth: Auth): boolean {\n\treturn Object.values(Auth).includes(auth);\n}\n\nexport function isRoleEscalation(currentAuth: Auth, updatedAuth: Auth) {\n\treturn currentAuth === Auth.CONTRIBUTOR && updatedAuth === Auth.ADMIN;\n}\n","import { NextFunction, Request, Response } from 'express';\nimport { Auth } from '../auth/auth';\nimport { sendStatus401 } from './statusCodes';\nimport { SessionValidationResult } from '../sessions/session';\nimport { validateSessionToken } from '../sessions/crud-session';\n\nexport function permitRoles(...rolesPermitted: Array<Auth>) {\n\treturn async (req: Request, res: Response, next: NextFunction) => {\n\t\tconst token = req.cookies.token;\n\n\t\tif (!token) {\n\t\t\treturn sendStatus401(res);\n\t\t}\n\n\t\tconst svr: SessionValidationResult = await validateSessionToken(token);\n\n\t\tif (!svr.user) {\n\t\t\treturn res.status(403).end();\n\t\t}\n\n\t\tif (rolesPermitted.includes(svr.user.auth) || (svr.user.id && svr.user.id === req.params.userId && rolesPermitted.includes(Auth.SELF))) {\n\t\t\treturn next();\n\t\t}\n\n\t\treturn sendStatus401(res);\n\t};\n}\n","import * as bcrypt from 'bcrypt';\nimport { UserUpdates, User } from './user';\nimport { Driver, Record, RecordShape, Session } from 'neo4j-driver';\nimport { connect } from '../db/connection';\nimport { InternalError } from '../errors/errors';\n\nexport enum Errors {\n\tCOULD_NOT_CREATE_USER = 'There was an error trying to create user.',\n\tCOULD_NOT_GET_USER = 'There was an error trying to search for user.',\n\tCOULD_NOT_DELETE_USER = 'There was an error trying to delete user.',\n\tCOULD_NOT_UPDATE_USER = 'There was an error trying to update user.',\n}\n\nexport async function createUser(user: User, password: string): Promise<User | undefined> {\n\tconst pwdHash: string = await bcrypt.hash(password, parseInt(process.env.AUTH_NEO4J_SALT_ROUNDS as string));\n\n\tconst driver: Driver = await connect();\n\tconst session: Session = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\tconst props: string[] = ['id:apoc.create.uuid()', 'email: $email', 'auth: $auth', 'pwd: $pwdHash'];\n\n\tif (user.firstName) props.push('firstName: $firstName');\n\tif (user.lastName) props.push('lastName: $lastName');\n\tif (user.secondName) props.push('secondName: $secondName');\n\n\tlet match: RecordShape;\n\n\ttry {\n\t\tmatch = await session.run(`CREATE(u:User { ${props.join(',')}}) RETURN u`, { ...user, pwdHash });\n\t} catch (error) {\n\t\tawait session.close();\n\t\tawait driver.close();\n\t\tthrow new InternalError(Errors.COULD_NOT_CREATE_USER, { cause: error });\n\t}\n\n\tawait session.close();\n\tawait driver.close();\n\n\tif (match.records.length !== 1) {\n\t\treturn undefined;\n\t}\n\n\treturn new User(match.records[0].get('u').properties);\n}\n\nexport async function getUser(id: string): Promise<User | undefined> {\n\tconst driver: Driver = await connect();\n\tconst session: Session = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\tlet match: RecordShape;\n\n\ttry {\n\t\tmatch = await session.run(`MATCH (u:User {id: $id}) RETURN u`, { id });\n\t} catch (error) {\n\t\tawait session.close();\n\t\tawait driver.close();\n\t\tthrow new InternalError(Errors.COULD_NOT_GET_USER, { cause: error });\n\t}\n\n\tawait driver.close();\n\tawait session.close();\n\n\tif (match.records.length !== 1) {\n\t\treturn undefined;\n\t}\n\n\treturn new User(match.records[0].get('u').properties);\n}\n\nexport async function deleteUser(id: string): Promise<User | undefined> {\n\tconst driver: Driver = await connect();\n\tconst session: Session = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\tlet match: RecordShape;\n\n\ttry {\n\t\tmatch = await session.run(`MATCH (u:User {id: $id}) WITH u, properties(u) as p DETACH DELETE u RETURN p`, { id });\n\t} catch (error) {\n\t\tawait session.close();\n\t\tawait driver.close();\n\t\tthrow new InternalError(Errors.COULD_NOT_DELETE_USER, { cause: error });\n\t}\n\n\tawait session.close();\n\tawait driver.close();\n\n\tif (match.records.length !== 1) {\n\t\treturn undefined;\n\t}\n\n\treturn new User(match.records[0].get('p'));\n}\n\nexport async function updateUser(id: string, userUpdates: UserUpdates): Promise<User | undefined> {\n\tconst props: string[] = [];\n\n\tif (userUpdates.updatedPassword) {\n\t\tuserUpdates.updatedPassword = await bcrypt.hash(userUpdates.updatedPassword, parseInt(process.env.SALT_ROUNDS as string));\n\t\tprops.push(`u.password = $updatedPassword`);\n\t}\n\n\tif (userUpdates.updatedEmail) props.push(`u.email = $updatedEmail`);\n\tif (userUpdates.updatedFirstName) props.push(`u.firstName = $updatedFirstName`);\n\tif (userUpdates.updatedLastName) props.push(`u.lastName = $updatedLastName`);\n\tif (userUpdates.updatedAuth) props.push(`u.auth = $updatedAuth`);\n\tif (userUpdates.updatedSecondName) props.push(`u.secondName = $updatedSecondName`);\n\n\tconst driver: Driver = await connect();\n\tconst session: Session = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\tlet match: RecordShape;\n\n\ttry {\n\t\tmatch = await session.run(`MATCH (u:User {id: $id}) SET ${props.join(',')} RETURN u`, { id, ...userUpdates });\n\t} catch (error) {\n\t\tawait session.close();\n\t\tawait driver.close();\n\t\tthrow new InternalError(Errors.COULD_NOT_UPDATE_USER, { cause: error });\n\t}\n\n\tawait session.close();\n\tawait driver.close();\n\n\tif (match.records.length !== 1) {\n\t\treturn undefined;\n\t}\n\n\treturn new User(match.records[0].get('u').properties);\n}\n\nexport async function getAllUsers(): Promise<Array<User>> {\n\tconst users: Array<User> = [];\n\n\tconst driver: Driver = await connect();\n\tconst session: Session = driver.session({ database: process.env.AUTH_NEO4J_USERS_DB });\n\n\tlet match: RecordShape;\n\n\ttry {\n\t\tmatch = await session.run(`MATCH (u:User) RETURN u`);\n\t} catch (error) {\n\t\tawait session.close();\n\t\tawait driver.close();\n\t\tthrow new InternalError(Errors.COULD_NOT_GET_USER, { cause: error });\n\t}\n\n\tawait session.close();\n\tawait driver.close();\n\n\tmatch.records.map((record: Record) => {\n\t\tusers.push(new User(record.get('u').properties));\n\t});\n\n\treturn users;\n}\n","import { Request, Response } from 'express';\nimport { User } from '../../users/user';\nimport {\n\tgetAllUsers,\n\tcreateUser as dbCreateUser,\n\tdeleteUser as dbDeleteUser,\n\tgetUser as dbGetUser,\n\tupdateUser as dbUpdateUser,\n} from '../../users/crud-user';\nimport { FieldError, FieldErrors, RoutingErrors } from '../../errors/errors';\nimport { isRoleEscalation, isValidAuth } from '../../auth/auth';\n\nexport async function getUsers(req: Request, res: Response) {\n\tconst users: Array<User> = await getAllUsers();\n\n\treturn res.status(200).json(users);\n}\n\nexport async function getUser(req: Request, res: Response) {\n\tconst { id } = req.params;\n\n\tconst user: User | undefined = await dbGetUser(id);\n\n\tif (!user) {\n\t\treturn res.status(404).end();\n\t}\n\n\treturn res.status(200).json(user).end();\n}\n\nexport async function createUser(req: Request, res: Response) {\n\tconst { email, auth, firstName, lastName, secondName, password } = req.body;\n\n\tconst required: FieldErrors = new FieldErrors(RoutingErrors.INVALID_REQUEST);\n\n\tif (!email) required.addFieldError(new FieldError(`email`, FieldError.REQUIRED));\n\tif (!auth) required.addFieldError(new FieldError(`auth`, FieldError.REQUIRED));\n\tif (!password) required.addFieldError(new FieldError(`password`, FieldError.REQUIRED));\n\tif (!isValidAuth(auth)) required.addFieldError(new FieldError(`auth`, FieldError.INVALID_AUTH));\n\n\tif (required.hasFieldErrors()) {\n\t\treturn res.status(required.getCode()).json({ message: required.message, data: required.getFields() }).end();\n\t}\n\n\tconst user: User | undefined = await dbCreateUser(new User({ email, auth, firstName, lastName, secondName }), password);\n\n\tif (user) {\n\t\treturn res.set('Location', `/${user.id}`).status(201).json(user).end();\n\t} else {\n\t\treturn res.status(422).end();\n\t}\n}\n\nexport async function deleteUser(req: Request, res: Response) {\n\tconst { id } = req.params;\n\tconst deletedUser: User | undefined = await dbDeleteUser(id);\n\n\tif (deletedUser) {\n\t\treturn res.status(204).end();\n\t} else {\n\t\treturn res.status(422).end();\n\t}\n}\n\nexport async function updateUser(req: Request, res: Response) {\n\tconst { id } = req.params;\n\tconst { updatedAuth, updatedEmail, updatedFirstName, updatedLastName, updatedSecondName, updatedPassword } = req.body;\n\n\tconst required: FieldErrors = new FieldErrors(RoutingErrors.INVALID_REQUEST);\n\n\tif (updatedAuth && !isValidAuth(updatedAuth)) required.addFieldError(new FieldError(`updatedAuth`, FieldError.INVALID_AUTH));\n\n\tif (required.hasFieldErrors()) {\n\t\treturn res.status(required.getCode()).json({ message: required.message, data: required.getFields() }).end();\n\t}\n\n\tconst user: User | undefined = await dbGetUser(id);\n\n\tif (!user) {\n\t\treturn res.status(404).end();\n\t}\n\n\tif (isRoleEscalation(user.auth, updatedAuth)) {\n\t\treturn res.status(403).end();\n\t}\n\n\tconst updatedUser: User | undefined = await dbUpdateUser(id, {\n\t\tupdatedAuth,\n\t\tupdatedEmail,\n\t\tupdatedFirstName,\n\t\tupdatedLastName,\n\t\tupdatedPassword,\n\t\tupdatedSecondName,\n\t});\n\n\tif (!updatedUser) {\n\t\treturn res.status(422).end();\n\t}\n\n\treturn res.status(200).json(updatedUser).end();\n}\n"],"mappings":"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","names":["neo4j","crypto","import_express","Auth","bcrypt","getUser","createUser","deleteUser","updateUser","createUser","getUser","updateUser","deleteUser","import_express","express","cookieParser"]}